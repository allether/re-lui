// Generated by CoffeeScript 2.5.1
(function() {
  var Chip, StyleContext, cn, css,
    boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

  css = require('./Style.less');

  cn = require('classnames');

  ({StyleContext} = require('./Style.coffee'));

  Chip = class Chip extends Component {
    constructor(props) {
      super(props);
      this.onMouseEnter = this.onMouseEnter.bind(this);
      this.onMouseLeave = this.onMouseLeave.bind(this);
      this.state = {
        value: void 0
      };
    }

    onMouseEnter(e) {
      var base;
      boundMethodCheck(this, Chip);
      this.setState({
        hover: true
      });
      return typeof (base = this.props).onMouseEnter === "function" ? base.onMouseEnter(e) : void 0;
    }

    onMouseLeave(e) {
      var base;
      boundMethodCheck(this, Chip);
      this.setState({
        hover: false
      });
      return typeof (base = this.props).onMouseLeave === "function" ? base.onMouseLeave(e) : void 0;
    }

    getButtonStyle(props, state) {
      var btn_style, focus, offset, select, value;
      offset = offset || 0;
      value = props.value != null ? props.value : state.value;
      select = props.select;
      focus = state.focus || state.hover;
      btn_style = {};
      if (props.type === 'button') {
        btn_style.cursor = 'pointer';
      }
      if (props.btn_type === 'primary') {
        if (select) {
          btn_style.color = this.context.secondary.inv[1];
          btn_style.background = this.context.secondary.color[0];
        } else if (focus) {
          btn_style.color = this.context.secondary.inv[1];
          btn_style.background = this.context.secondary.color[0];
        } else {
          btn_style.color = this.context.secondary.inv[2];
          btn_style.background = this.context.secondary.color[1];
        }
      } else if (props.btn_type === 'flat') {
        if (select) {
          btn_style.color = this.context.primary.color[1];
          btn_style.background = this.context.primary.inv[1];
        } else if (focus) {
          btn_style.color = this.context.primary.color[1];
          btn_style.background = this.context.primary.inv[1];
        } else {
          btn_style.color = this.context.primary.color[2];
          btn_style.background = this.context.primary.inv[0];
        }
      } else {
        if (select) {
          btn_style.color = this.context.primary.color[1];
          btn_style.background = this.context.primary.inv[2];
        } else if (focus) {
          btn_style.color = this.context.primary.color[1];
          btn_style.background = this.context.primary.inv[2];
        } else {
          btn_style.color = this.context.primary.color[2];
          btn_style.background = this.context.primary.inv[1];
        }
      }
      return btn_style;
    }

    render() {
      var chip_props;
      chip_props = Object.assign({}, this.props, {
        onMouseEnter: this.onMouseEnter,
        onMouseLeave: this.onMouseLeave,
        className: cn(this.props.disabled && 'disabled', css['btn'], css['chip'], this.props.className),
        style: Object.assign({}, this.getButtonStyle(this.props, this.state), this.props.style)
      });
      return h('span', chip_props, this.props.children);
    }

  };

  Chip.contextType = StyleContext;

  module.exports = Chip;

}).call(this);

//# sourceMappingURL=Chip.js.map
