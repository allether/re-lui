// Generated by CoffeeScript 2.5.1
(function() {
  var AlertOverlay, Overlay, Slide, StyleContext, cn, css;

  Overlay = require('./Overlay.coffee');

  Slide = require('re-slide');

  cn = require('classnames');

  ({StyleContext} = require('./Style.coffee'));

  css = require('./Style.less');

  // log StyleContext
  AlertOverlay = class AlertOverlay extends Component {
    constructor(props) {
      super(props);
      this.state = {
        error: props.message,
        show_alert: false
      };
    }

    UNSAFE_componentWillUpdate(props, state) {
      if (props.visible) {
        this.state.message = props.message;
        return this.state.alert_type = props.alert_type;
      }
    }

    componentDidUpdate(props) {
      if (props.visible !== this.props.visible) {
        return this.setState({
          show_alert: this.props.visible && this.props.message
        });
      }
    }

    render() {
      var alert_bg, alert_color, slide_pos;
      // log @context
      // log @context
      if (this.state.show_alert) {
        slide_pos = 1;
      } else {
        slide_pos = 0;
      }
      if (this.state.alert_type === 'error') {
        alert_bg = this.context.primary.false;
      } else if (this.state.alert_type === 'success') {
        alert_bg = this.context.primary.true;
      } else {
        alert_bg = this.context.primary.inv[0];
      }
      alert_color = 'white';
      return h(Overlay, {
        onClick: this.props.onClick,
        visible: this.props.visible,
        initial_visible: this.props.initial_visible,
        style: this.props.style,
        transparent: this.props.transparent,
        backdrop_color: this.props.backdrop_color
      }, h(Slide, {
        className: css['overlay-slide'],
        slide: true,
        vert: true,
        beta: 100,
        pos: slide_pos
      }, h(Slide, {
        beta: 100,
        center: true
      }, this.props.children || null), h(Slide, {
        dim: 200,
        className: css['overlay-alert'],
        onClick: this.props.onClick,
        style: {
          background: alert_bg,
          color: alert_color
        },
        center: true
      }, this.state.message)));
    }

  };

  AlertOverlay.contextType = StyleContext;

  module.exports = AlertOverlay;

}).call(this);

//# sourceMappingURL=AlertOverlay.js.map
