// Generated by CoffeeScript 2.5.1
(function() {
  var Bar, Color, Menu, MenuContext, StyleContext, createContext, css,
    boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

  css = require('./Style.less');

  Bar = require('./Bar.coffee');

  Color = require('color');

  ({createContext} = require('react'));

  ({StyleContext} = require('./Style.coffee'));

  // Overlay = require './Overlay.coffee'
  MenuContext = createContext({});

  global.MenuContext = MenuContext;

  Menu = class Menu extends Component {
    constructor(props) {
      super(props);
      this.getContext = this.getContext.bind(this);
      this.spliceTabBranch = this.spliceTabBranch.bind(this);
      // componentWillUpdate: (props,state)->
      // 	if props.backdrop_color != @props.backdrop_color
      // 		state.backdrop_opaque_color = @setColor(props.backdrop_color)

      // componentDidUpdate: ->	
      // 	@state.reveal = undefined
      this.componentDidMount = this.componentDidMount.bind(this);
      this.onClickBackdrop = this.onClickBackdrop.bind(this);
      this.clearTabBranch = this.clearTabBranch.bind(this);
      this.onContextTabReveal = this.onContextTabReveal.bind(this);
      this.state = {
        width: 0,
        height: 0,
        tab_branch: [],
        backdrop_color: props.backdrop_color || '#000'
      };
    }

    getContext() {
      boundMethodCheck(this, Menu);
      return {
        onContextTabReveal: this.onContextTabReveal,
        backdrop_color: this.props.backdrop_color || this.state.backdrop_color,
        spliceTabBranch: this.spliceTabBranch,
        onClickBackdrop: this.props.onClickBackdrop,
        tab_branch: this.state.tab_branch,
        alternate: this.props.alternate,
        vert: this.props.vert,
        render_unrevealed_children: this.props.render_unrevealed_children || false,
        bounding_box: this.props.bounding_box,
        big: this.props.big,
        hover_reveal_enabled: this.props.hover_reveal_enabled,
        click_reveal_enabled: this.props.click_reveal_enabled,
        level: 0,
        split_x: this.props.split_x,
        split_y: this.props.split_y,
        bar_dir_x: this.props.bar_dir_x,
        bar_dir_y: this.props.bar_dir_y,
        force_split_x: this.props.force_split_x,
        force_split_y: this.props.force_split_y
      };
    }

    spliceTabBranch(tab) {
      var tab_i;
      boundMethodCheck(this, Menu);
      tab_i = this.state.tab_branch.indexOf(tab);
      if (tab_i < 0) {
        return;
      }
      this.state.tab_branch.splice(tab_i);
      return this.forceUpdate();
    }

    componentDidMount() {
      boundMethodCheck(this, Menu);
      return this.forceUpdate();
    }

    onClickBackdrop(e) {
      var base;
      boundMethodCheck(this, Menu);
      this.clearTabBranch(e);
      return typeof (base = this.props).onClickBackdrop === "function" ? base.onClickBackdrop(e) : void 0;
    }

    clearTabBranch(e) {
      boundMethodCheck(this, Menu);
      this.state.tab_branch.length = 0;
      return this.forceUpdate();
    }

    onContextTabReveal(tab_branch, e) {
      boundMethodCheck(this, Menu);
      return this.setState({
        tab_branch: tab_branch
      });
    }

    render() {
      var bar_style;
      bar_style = {};
      if (this.props.fixed) {
        bar_style.left = this.props.left;
        bar_style.top = this.props.top;
        bar_style.position = 'fixed';
      }
      if (this.props.style) {
        Object.assign(bar_style, this.props.style);
      }
      return h(MenuContext.Provider, {
        value: this.getContext()
      }, h(Bar, {
        btn: false,
        vert: this.props.vert,
        big: this.props.big,
        style: bar_style,
        className: this.props.className
      }, this.props.children));
    }

  };

  // backdrop
  Menu.defaultProps = {
    x: 0,
    y: 0,
    split_x: 1,
    // force_split_x: 0
    // force_split_y: 0
    split_y: 1,
    bar_dir_x: 1,
    bar_dir_y: 1,
    bounding_box: {
      x: 0,
      y: 0,
      width: 2e308,
      height: 2e308
    },
    show_backdrop: void 0
  };

  Menu.contextType = StyleContext;

  module.exports = Menu;

}).call(this);

//# sourceMappingURL=Menu.js.map
