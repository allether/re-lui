// Generated by CoffeeScript 2.5.1
(function() {
  var Color, Component, Style, StyleContext, createContext, createElement, css, generatePalette, generateStyle, step_mix;

  Color = require('color');

  css = require('./Style.less');

  require('./Style_.less');

  ({createElement, Component, createContext} = require('react'));

  global.h = createElement;

  global.Component = Component;

  ({generateStyle, generatePalette} = require('./Palette'));

  Style = class Style extends Component {
    constructor(props) {
      super(props);
      this.state = {};
      this.generate(Style.prototype.ease_linear);
    }

    generate(default_ease) {
      // log 'GENERATE'
      if (this.props.style) {
        this.primary = this.props.style.primary;
        return this.secondary = this.props.style.secondary;
      } else {
        this.primary = generatePalette(this.props.primary, this.props.primary_inv, this.props.step_count || 10, this.props.primary_ease || default_ease, this.props.primary_inv_ease || default_ease);
        return this.secondary = generatePalette(this.props.secondary, this.props.secondary_inv, this.props.step_count || 10, this.props.secondary_ease || default_ease, this.props.secondary_inv_ease || default_ease);
      }
    }

    ease_linear(i, count) {
      return 1 / count * i;
    }

    ease_in(i, count) {
      var n;
      n = 1 / count * i * (i / count);
      return n;
    }

    ease_in_2(i, count) {
      return Math.pow(i, 3) / Math.pow(count, 3);
    }

    ease_out(i, count) {
      return 1 / count * Math.sqrt(i * count);
    }

    ease_out_2(i, count) {
      return Math.pow(1 / count * Math.sqrt(Math.sqrt(i * count) * count), 1.2);
    }

    componentDidUpdate(props, state) {
      if (this.props.style !== props.style || this.props.primary !== props.primary || this.props.secondary !== props.secondary || this.props.secondary_inv !== props.secondary_inv || this.props.primary_inv !== props.primary_inv) {
        this.generate(Style.prototype.ease_linear);
        return this.setState({});
      }
    }

    render() {
      return h(StyleContext.Provider, {
        value: {
          primary: this.primary,
          secondary: this.secondary
        }
      }, this.props.children);
    }

  };

  step_mix = function(a, b, count, step_fn) {
    var c, c2, i, j, ref, steps;
    // log Style.prototype.ease_linear
    steps = [];
    c = Color(a);
    c2 = Color(b);
    for (i = j = 0, ref = count; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
      steps.push(Color(c).mix(c2, step_fn(i, count)).rgb().string());
    }
    return steps;
  };

  StyleContext = createContext({});

  module.exports = {Style, StyleContext, generateStyle};

}).call(this);

//# sourceMappingURL=Style.js.map
